name: Backend CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'Backend/**'

env:
  IMAGE_TAG: ${{ github.sha }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  BACKEND_CONTAINER_NAME: backend
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USERNAME: ${{ secrets.SSH_USER }}
  SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  NETWORK_NAME: backend-network  # ðŸ‘ˆ Add a default fallback network name

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ env.DOCKERHUB_PASSWORD }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and Push Backend Docker Image
        run: |
          IMAGE_NAME=${{ env.DOCKERHUB_USERNAME }}/backenddmd
          cd Backend
          docker build -t $IMAGE_NAME:${{ env.IMAGE_TAG }} .
          docker push $IMAGE_NAME:${{ env.IMAGE_TAG }}

      - name: Deploy to Remote Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_KEY }}
          script: |
            set -e  # ðŸ”’ Exit on first failure
            echo "Deploying Backend..."

            IMAGE_TAG="${{ env.IMAGE_TAG }}"
            BACKEND_IMAGE_NAME="${{ env.DOCKERHUB_USERNAME }}/backenddmd"
            BACKEND_CONTAINER_NAME="${{ env.BACKEND_CONTAINER_NAME }}"
            NETWORK_NAME="${{ env.NETWORK_NAME }}"

            echo "Pulling latest backend image..."
            docker pull "$BACKEND_IMAGE_NAME:$IMAGE_TAG"

            echo "Checking if backend container '$BACKEND_CONTAINER_NAME' exists..."
            if docker ps -a --format '{{.Names}}' | grep -w "$BACKEND_CONTAINER_NAME" > /dev/null; then
              echo "Stopping and removing existing container..."
              docker stop "$BACKEND_CONTAINER_NAME"
              docker rm -f "$BACKEND_CONTAINER_NAME"
            else
              echo "No existing container found. Proceeding..."
            fi

            echo "Ensuring Docker network '$NETWORK_NAME' exists..."
            docker network inspect "$NETWORK_NAME" >/dev/null 2>&1 || docker network create "$NETWORK_NAME"

            echo "Starting new backend container with volume mounted..."
            docker run -d \
              --name "$BACKEND_CONTAINER_NAME" \
              --network "$NETWORK_NAME" \
              -p 8085:8085 \
              -v /home/admin/designmyday/uploads:/uploads \
              "$BACKEND_IMAGE_NAME:$IMAGE_TAG"

            echo "âœ… Backend container is running with new image and mounted volume."
